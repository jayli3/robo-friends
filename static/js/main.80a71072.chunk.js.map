{"version":3,"sources":["serviceWorker.js","components/card.js","components/cardlist.js","components/searchbox.js","components/scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_this$props","this","props","name","username","email","react_default","a","createElement","className","alt","src","concat","Component","CardList","robots","map","robot","i","card","key","id","SearchBox","event","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","setState","searchfield","target","value","state","_this2","fetch","then","response","json","users","_this3","filteredRobots","filter","toLowerCase","includes","length","searchbox","components_scroll","cardlist","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGCESC,mLAhBN,IAAAC,EAEyBC,KAAKC,MAA9BC,EAFAH,EAEAG,KAAMC,EAFNJ,EAEMI,SAAUC,EAFhBL,EAEgBK,MAEvB,OAECC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,QAAQC,IAAG,wBAAAC,OAA0BR,EAA1B,cACpBE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaN,GAC3BG,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAaJ,WAVXQ,aCcJC,EAdE,SAACZ,GAAS,IAEnBa,EAAUb,EAAVa,OACP,OACCT,EAAAC,EAAAC,cAAA,WAEEO,EAAOC,IAAI,SAACC,EAAOC,GAClB,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,CAAMC,IAAKF,EAAGG,GAAIJ,EAAMI,GAAIlB,KAAMc,EAAMd,KAAMC,SAAUa,EAAMb,SAAUC,MAAOY,EAAMZ,YCClFiB,EATG,SAACC,GAAU,IACrBC,EAAgBD,EAAhBC,aACP,OACClB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mCAAmCgB,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCI5FI,EARA,SAAC1B,GACf,OACCI,EAAAC,EAAAC,cAAA,OAAKqB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnE9B,EAAM+B,WC6CKC,qBA3Cd,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAnC,KAAAiC,IACZC,EAAAC,OAAAE,EAAA,EAAAF,CAAAnC,KAAAmC,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAvC,QAeDwC,eAAiB,SAAClB,GACjBY,EAAKO,SAAS,CAACC,YAAapB,EAAMqB,OAAOC,SAfzCV,EAAKW,MAAQ,CACZ/B,OAAQ,GACR4B,YAAa,IAJFR,mFAQM,IAAAY,EAAA9C,KAClB+C,MAAM,8CACJC,KAAK,SAAAC,GAAY,OAAOA,EAASC,SACjCF,KAAK,SAAAG,GAAUL,EAAKL,SAAS,CAAC3B,OAAQqC,uCASjC,IAAAC,EAAApD,KACDqD,EAAiBrD,KAAK6C,MAAM/B,OAAOwC,OAAO,SAACtC,GAChD,OAAOA,EAAMd,KAAKqD,cAAcC,SAASJ,EAAKP,MAAMH,YAAYa,iBAEjE,OAAgC,IAA7BvD,KAAK6C,MAAM/B,OAAO2C,OAEnBpD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,qBAKAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAACmD,EAAD,CAAWnC,aAAcvB,KAAKwC,eAAgBE,YAAa1C,KAAK6C,MAAMH,cACtErC,EAAAC,EAAAC,cAACoD,EAAD,KACCtD,EAAAC,EAAAC,cAACqD,EAAD,CAAU9C,OAAQuC,aApCNzC,cCClBiD,IAASC,OACRzD,EAAAC,EAAAC,cAACwD,EAAD,MACEC,SAASC,eAAe,SNwHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.80a71072.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport {Component} from 'react';\n\nclass Card extends Component{\n\trender(){\n\n\t\tconst {name, username, email} = this.props\n\n\t\treturn(\n\n\t\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n\t\t\t\t<img alt='robot' src={`https://robohash.org/${username}?200x200`} />\n\t\t\t\t<h2 className='dark-gray'>{name}</h2>\n\t\t\t\t<p className='dark-gray'>{email}</p>\n\t\t\t</div>\n\n\t\t\t)\n\t}\n}\n\nexport default Card;","import React from 'react';\nimport Card from './card.js';\n\nconst CardList = (props) =>{\n\n\tconst {robots} = props;\n\treturn(\n\t\t<div>\n\t\t\t{\n\t\t\t\trobots.map((robot, i) => {\n\t\t\t\t\treturn(<Card key={i} id={robot.id} name={robot.name} username={robot.username} email={robot.email}/>);\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t)\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = (event) => {\n\tconst {searchChange} = event;\n\treturn(\n\t\t<div className='pa2'>\n\t\t\t<input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='Search Robots' onChange={searchChange}/>\n\t\t</div>\n\t\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn(\n\t\t<div style={{overflowY: 'scroll', border: '2px solid black', height: '800px'}}>\n\t\t\t{props.children}\n\t\t</div>\n\t\t)\n}\n\nexport default Scroll;","import React, {Component} from 'react';\nimport CardList from '../components/cardlist.js';\nimport SearchBox from '../components/searchbox.js';\nimport Scroll from '../components/scroll.js';\nimport './App.css';\n\nclass App extends Component {\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\trobots: [],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n\tcomponentDidMount(){\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response =>{return response.json();})\n\t\t\t.then(users => {this.setState({robots: users});\n\t\t});\n\t\t\n\t}\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({searchfield: event.target.value});\n\t}\n\n\trender(){\n\t\tconst filteredRobots = this.state.robots.filter((robot)=>{\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n\t\t});\n\t\tif(this.state.robots.length === 0){\n\t\t\treturn(\n\t\t\t\t<h1 className='tc'>Loading Robots...</h1>\n\t\t\t\t);\n\t\t}\n\t\telse{\n\t\t\treturn(\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange} searchfield={this.state.searchfield}/>\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t\t);\n\t\t}\n\t}\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App.js';\n\nReactDOM.render(\n\t<App />\n\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}